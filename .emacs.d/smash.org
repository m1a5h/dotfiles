#+STARTUP: overview

Smashing config

* Interface tweaks
  #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (fset 'yes-or-no-p 'y-or-n-p)
     (global-set-key (kbd "<f5>") 'revert-buffer)
     (setq split-width-threshold 1)
     (global-hl-line-mode t)
     (setenv "PATH" (concat "~/.local/bin:" (getenv "PATH")))
  #+END_SRC
* Disable mouse
  #+BEGIN_SRC emacs-lisp
    (use-package disable-mouse
      :ensure t
      :config
      (global-disable-mouse-mode))
  #+END_SRC
* Backup/temp files
  #+begin_src emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backupfiles")))
  #+end_src
* Hungry delete
  #+begin_src emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))
  #+end_src
* Expand region
  #+begin_src emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))
  #+end_src
* Undo tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode)
      :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/backupfiles"))))
  #+END_SRC
* Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
      (projectile-mode +1))
  #+end_src
* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :init
      (progn
	(setq dashboard-items '((recents . 5)
				(projects . 5))))
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-heading-icons t)
      (if (eq system-type 'windows-nt)
	  (setq dashboard-startup-banner "C:/Program Files/emacs/share/icons/hicolor/128x128/apps/emacs.png")
	(setq dashboard-startup-banner "/usr/share/icons/hicolor/128x128/apps/emacs.png"))
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
  #+end_src
* Fix WSL file ACL
  #+begin_src emacs-lisp
    (when (eq system-type 'windows-nt)
      (defun fp/ignore-wsl-acls (orig-fun &rest args)
	"Ignore ACLs on WSL. WSL does not provide an ACL, but emacs
    expects there to be one before saving any file. Without this
    advice, files on WSL can not be saved."
	(if (or (string-match-p "^//wsl\$/" (car args)) (string-match-p "^l:/" (car args)))
	    (progn (message "ignoring wsl acls") "")
	  (apply orig-fun args)))

      (advice-add 'file-acl :around 'fp/ignore-wsl-acls))
  #+end_src 
* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC
* Which
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))
  #+END_SRC
* Ace window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window))
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0))))))
  #+END_SRC
* Org mode
** Org bullets
   #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Org capture
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c c")
		     'org-capture)

     (setq org-agenda-files (list "~/orgfiles/gcal.org"
				  "~/orgfiles/i.org"))

     (setq org-capture-templates
	   '(("a" "Appointment" entry (file  "~/orgfiles/gcal.org" "Appointments")
	      "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
	     ("n" "Note" entry (file+headline "~/orgfiles/notes.org" "Notes")
	      "* Note %?\n%T")
	     ("l" "Link" entry (file+headline "~/orgfiles/links.org" "Links")
	      "* %? %^L %^g \n%T" :prepend t)
	     ("b" "Blog idea" entry (file+headline "~/orgfiles/i.org" "Blog Topics:")
	      "* %?\n%T" :prepend t)
	     ("t" "To Do Item" entry (file+headline "~/orgfiles/i.org" "To Do Items")
	      "* %?\n%T" :prepend t)
	     ("j" "Journal" entry (file+datetree "~/orgfiles/journal.org")
	      "* %?\nEntered on %U\n  %i\n  %a")))

     (defadvice org-capture-finalize
	 (after delete-capture-frame activate)
       "Advise capture-finalize to close the frame"
       (if (equal "capture" (frame-parameter nil 'name))
	   (delete-frame)))

     (defadvice org-capture-destroy
	 (after delete-capture-frame activate)
       "Advise capture-destroy to close the frame"
       (if (equal "capture" (frame-parameter nil 'name))
	   (delete-frame)))

     (use-package noflet
       :ensure t )
     (defun make-capture-frame ()
       "Create a new frame and run org-capture."
       (interactive)
       (make-frame '((name . "capture")))
       (select-frame-by-name "capture")
       (delete-other-windows)
       (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
	 (org-capture)))
   #+END_SRC
** Org GCal
   #+BEGIN_SRC emacs-lisp
     (use-package org-gcal
       :ensure t
       :config
       (let ((gcal-credentials (with-temp-buffer
				 (insert-file-contents "~/.emacs.d/gcal_creds.txt")
				 (split-string (buffer-string) "\n" t))))
	 (setq org-gcal-client-id (car gcal-credentials)
	       org-gcal-client-secret (cadr gcal-credentials)
	       org-gcal-file-alist '(("matthewiashman@gmail.com" .  "~/orgfiles/gcal.org")))
	 (org-gcal-reload-client-id-secret))
       :hook
       ((org-agenda-mode . org-gcal-sync)
	(org-capture-after-finalize . org-gcal-sync)))
   #+END_SRC
** Org reveal
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :ensure ox-reveal)

     (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
     (setq org-reveal-mathjax t)

     (use-package htmlize
       :ensure t)
   #+END_SRC
* Elfeed
  #+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :ensure t
      :bind (:map elfeed-search-mode-map
		  ("q" . bjm/elfeed-save-db-and-bury)
		  ("Q" . bjm/elfeed-save-db-and-bury)
		  ("m" . elfeed-toggle-star)
		  ("M" . elfeed-toggle-star)))
		  
    (use-package elfeed-goodies
      :ensure t
      :config
      (elfeed-goodies/setup))

    (use-package elfeed-org
      :ensure t
      :config
      (elfeed-org)
      (setq rmh-elfed-org-files (list "~/orgfiles/elfeed.org")))

    (setq elfeed-db-directory "~/elfeeddb")

    (defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))

    ;;functions to support syncing .elfeed between machines
    ;;makes sure elfeed reads index from disk before launching
    (defun bjm/elfeed-load-db-and-open ()
      "Wrapper to load the elfeed db from disk before opening"
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force))

    ;;write to disk when quiting
    (defun bjm/elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed db to disk before burying buffer"
      (interactive)
      (elfeed-db-save)
      (quit-window))

    (defalias 'elfeed-toggle-star
      (elfeed-expose #'elfeed-search-toggle-all 'star))
  #+END_SRC
* Hydra
  #+BEGIN_SRC emacs-lisp
    (use-package hydra
      :ensure t)

    ;; Hydra for modes that toggle on and off
    (global-set-key
     (kbd "C-x t")
     (defhydra toggle (:color blue)
       "toggle"
       ("a" abbrev-mode "abbrev")
       ("s" flyspell-mode "flyspell")
       ("d" toggle-debug-on-error "debug")
       ("c" fci-mode "fCi")
       ("f" auto-fill-mode "fill")
       ("t" toggle-truncate-lines "truncate")
       ("w" whitespace-mode "whitespace")
       ("q" nil "cancel")))

    ;; Hydra for navigation
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")))

    ;; Hydra for some org-mode stuff
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
       ("l" (or )rg-capture-goto-last-stored "Last Capture")))
  #+END_SRC
* Ido mode
  #+BEGIN_SRC emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)
  ;; #(defalias 'list-buffers 'ibuffer)
  #+END_SRC
* Swiper search
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)

	(setq ivy-display-style 'fancy)
	(setq enable-recursive-minibuffers t)
	;; (global-set-key "\C-s" 'swiper)
	;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
	;; (global-set-key (kbd "<f6>") 'ivy-resume)
	;; (global-set-key (kbd "M-x") 'counsel-M-x)
	;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	;; (global-set-key (kbd "<f1> l") 'counsel-load-library)
	;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	;; (global-set-key (kbd "C-c g") 'counsel-git)
	;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
	;; (global-set-key (kbd "C-c k") 'counsel-ag)
	;; (global-set-key (kbd "C-x l") 'counsel-locate)
	;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+END_SRC
* Auto-complete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)))
  #+END_SRC
* Avy movement
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure
      :bind ("M-s" . avy-goto-char))
  #+END_SRC
* Theming
** Doom emacs
   #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :config (load-theme 'doom-acario-dark t))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :init
      (progn
	(setq doom-modeline-icon t)))
   #+END_SRC
** Icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t
       :config
       (unless (member "all-the-icons" (font-family-list))
	 (all-the-icons-install-fonts t)))

     (use-package nerd-icons
       :ensure t
       :config
       (unless (member "Nerd Icons" (font-family-list))
	 (nerd-icons-install-fonts t)))
   #+END_SRC
* Better Shell
  #+BEGIN_SRC emacs-lisp
    (use-package better-shell
      :ensure t
      :bind (("C-'" . better-shell-shell)
	     ("C-;" . better-shell-remote-open)))
  #+END_SRC
* Restclient
  #+begin_src emacs-lisp
    (use-package restclient
      :ensure t
      :mode ("\\.http\\'" . restclient-mode))
  #+end_src
* HTTPD
  #+begin_src emacs-lisp
    (use-package simple-httpd
      :ensure t
      :config
      (add-to-list 'httpd-mime-types '("html" . "text/html"))
      (add-to-list 'httpd-mime-types '("json" . "application/json")))
  #+end_src
* Eshell highlighting
  #+BEGIN_SRC emacs-lisp
     (use-package eshell-syntax-highlighting
       :after eshell
       :ensure t
       :config
       (eshell-syntax-highlighting-global-mode +1))
  #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t)
      :config
      (defun yadm ()
	(interactive)
	(magit-status "/yadm::"))

      (add-to-list 'tramp-methods
		   '("yadm"
		     (tramp-login-program "yadm")
		     (tramp-login-args (("enter")))
		     (tramp-login-env (("SHELL") ("/bin/bash")))
		     (tramp-remote-shell "/bin/bash")
		     (tramp-remote-shell-args ("-c"))))
      :bind (("C-x y" . yadm)))
  #+END_SRC
* Infra As Code
** Terraform
   #+BEGIN_SRC emacs-lisp
     (use-package terraform-mode
       :ensure t)
     (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
   #+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC
* Markdown
  #+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure t)

    (eval-after-load "markdown-mode"
      '(defalias 'markdown-add-xhtml-header-and-footer 'as/markdown-add-xhtml-header-and-footer))

    (defun as/markdown-add-xhtml-header-and-footer (title)
      "Wrap XHTML header and footer with given TITLE around current buffer."
      (goto-char (point-min))
      (insert "<!DOCTYPE html>\n"
	      "<html>\n"
	      "<head>\n<title>")
      (insert title)
      (insert "</title>\n")
      (insert "<meta charset=\"utf-8\" />\n")
      (when (> (length markdown-css-paths) 0)
	(insert (mapconcat 'markdown-stylesheet-link-string markdown-css-paths "\n")))
      (insert "\n</head>\n\n"
	      "<body>\n\n")
      (goto-char (point-max))
      (insert "\n"
	      "</body>\n"
	      "</html>\n"))
  #+end_src
* Web mode
  #+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist
	    '(("django"    . "\\.html\\'")))
      (setq web-mode-ac-sources-alist
	    '(("css" . (ac-source-css-property))
	      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
      (with-eval-after-load 'web-mode
	(define-key web-mode-map (kbd "C-c C-v") 'browse-url-of-buffer))

      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t))
  #+end_src
* Python
** Elpy
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (elpy-enable))
     (setq elpy-rpc-python-command "python3")
   #+END_SRC
** Jedi
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :config
       (add-hook 'python-mode-hook 'jedi:setup)
       (add-hook 'python-mode-hook 'jedi:ac-setup))
   #+END_SRC
** Python 3
   #+BEGIN_SRC emacs-lisp
     (setq py-python-command "python3")
     (setq python-shell-interpreter "python3")
   #+END_SRC
** Virtualenv
   #+BEGIN_SRC emacs-lisp
     (use-package virtualenvwrapper
       :ensure t
       :config
       (venv-initialize-interactive-shells)
       (venv-initialize-eshell))
   #+END_SRC
** Anaconda
   #+begin_src emacs-lisp
     (use-package anaconda-mode
       :ensure t
       :hook (python-mode . anaconda-mode)
       :hook (python-mode-hook . anaconda-eldoc-hook)
       :config
       (setq python-shell-interpreter (expand-file-name "~/miniconda3/bin/python"))
       (setq exec-path (append exec-path '("~/miniconda3/bin")))
       (setenv "PATH" (concat "~/miniconda3/bin:" (getenv "PATH"))))
   #+end_src
** Pytest
   #+begin_src emacs-lisp
     (use-package python-pytest
       :ensure t
       :config
       (setq python-pytest-confirm t)
       (setq pytest-cmd-flags "-x --color=yes"))
   #+end_src
* JavaScript
** JS2 Mode
   #+begin_src emacs-lisp
     (use-package js2-mode
       :ensure t
       :mode ("\\.js\\'" . js2-mode)
       :hook (js2-mode . js2-imenu-extras-mode))
   #+end_src
* Powershell
  #+BEGIN_SRC emacs-lisp
    (use-package powershell
      :ensure t)
  #+END_SRC
* Vimscript
  #+begin_src emacs-lisp
    (use-package vimrc-mode
      :ensure t
      :mode ("\\.vim\\(rc\\)?\\'" . vimrc-mode))
  #+end_src
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
		 :ensure t
		 :init
		 (global-flycheck-mode t))
  #+END_SRC
* Windows startup
  #+BEGIN_SRC emacs-lisp
    (if (eq system-type 'windows-nt)
	(setq default-directory "C:/Users/smash")
      (set-language-environment "UTF-8"))
  #+END_SRC
